#include <cassert>
#include <cstdio>
#include <cmath>
#include <iostream>
#include <vector>
#include <queue>

using namespace std;
using Int = long long;

class Topological_sort {
private:
	Int V;
	vector<vector<Int>> edges;
	vector<Int> used;

public:
	Topological_sort(Int n) :V(n), edges(n), used(n) {}
	Topological_sort(vector<vector<Int>>& edges) :V(edges.size()), used(edges.size()) { this->edges = edges; }

	void add_edge(Int from, Int to) { edges[from].emplace_back(to); }

	vector<Int> build() {

		vector<Int> res, in(V);
		for (Int i = 0; i < V; i++) for (const auto& e : edges[i]) in[e]++;

		res.reserve(V);
		queue<Int> que;
		for (Int i = 0; i < V; i++) {
			if (in[i] == 0 && !used[i]) {
				used[i] = 1;
				que.emplace(i);
			}
		}
		while (!que.empty()) {
			Int now = que.front();
			//DMP(now, in);
			que.pop();
			res.emplace_back(now);
			for (const auto& e : edges[now]) {
				in[e]--;
				if (in[e] == 0) {
					if (used[e]) return vector<Int>(); // unable to sort
					used[e] = used[now] + 1;
					que.emplace(e);
				}
			}
		}

		return res;
	}

	Int longest_path() {
		if (none_of(used.begin(), used.end(), [](Int u) { return u > 0; })) build();
		return *max_element(used.begin(), used.end()) - 1;
	}

};
